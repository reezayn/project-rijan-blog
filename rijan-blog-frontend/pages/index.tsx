import ArticlesList from '@/components/ArticlesList'
import Pagination from '@/components/Pagination'
import Tabs from '@/components/Tabs'
import { fetchArticles, fetchCategories } from '@/http'
import { IArticle, ICategory, ICollectionResponse, IPagination, IQueryOptions } from '@/types'
import { debounce } from '@/utils'
import { AxiosResponse } from 'axios'
import { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import qs from 'qs'

interface IPropTypes {
  categories: {
    items: ICategory[]
  }
  articles: {
    items: IArticle[]
    pagination: IPagination
  }
}

const Home: NextPage<IPropTypes> = ({ categories, articles }) => {
  const router = useRouter()
  const { page, pageCount } = articles.pagination
  const handleSearch = (query: string) => {
    router.push(`/?search=${query}`)
  }
  return (
    <div className="">
      <Head>
        <title>Code Hustle | Home</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tabs categoriesItems={categories.items} handleOnSearch={debounce(handleSearch, 500)} />

      <div className="my-10">
        <ArticlesList articles={articles.items} />
      </div>

      <Pagination page={page} pageCount={pageCount} />
    </div>
  )
}

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  // Articles
  const options: Partial<IQueryOptions> = {
    populate: ['author.avatar', 'Image'],
    sort: ['id: desc'],
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 4,
    },
  }
  if (query.search) {
    options.filters = {
      Title: {
        $containsi: query.search,
      },
    }
  }
  const queryString = qs.stringify(options)
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await fetchArticles(queryString)
  // Categories
  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await fetchCategories()
  return {
    props: {
      categories: {
        items: categories.data,
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination,
      },
    },
  }
}

export default Home
