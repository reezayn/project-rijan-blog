import Tabs from '@/components/Tabs'
import { fetchArticles, fetchCategories } from '@/http'
import { IArticle, ICategory, ICollectionResponse, IPagination, IQueryOptions } from '@/types'
import { AxiosResponse } from 'axios'
import { GetServerSideProps } from 'next'
import Head from 'next/head'
import React from 'react'
import qs from 'qs'
import ArticlesList from '@/components/ArticlesList'
import { capitalizeFirstLetter, debounce, slugToTitle } from '@/utils'
import Pagination from '@/components/Pagination'
import { useRouter } from 'next/router'

interface IPropType {
  categories: {
    items: ICategory[]
    pagination: IPagination
  }
  articles: {
    items: IArticle[]
    pagination: IPagination
  }
  slug: string
}

const category = ({ categories, articles, slug }: IPropType) => {
  const { page, pageCount } = articles.pagination
  const router = useRouter()
  const { category: categorySlug} = router.query

  const formatedCategory = () => {
    return capitalizeFirstLetter(slugToTitle(slug))
  }
  const handleSearch = (query: string) => {
    router.push(`/category/${categorySlug}/?search=${query}`)
  }
  return (
    <>
      <Head>
        <title>Code Hustle | {formatedCategory()}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tabs categoriesItems={categories.items} handleOnSearch={debounce(handleSearch, 500)} />
      <div className="my-10">
        <ArticlesList articles={articles.items} />
      </div>
      <Pagination page={page} pageCount={pageCount} redirectUrl={`/category/${categorySlug}`} />
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const options:Partial<IQueryOptions> = {
    populate: ['author.avatar', 'Image'],
    sort: ['id:desc'],
    filters: {
      category: {
        slug: query.category,
      },
    },
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 4,
    },
  }
  if (query.search) {
    options.filters = {
      Title: {
        $containsi: query.search,
      },
    }
  }
  const queryString = qs.stringify(options)
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await fetchArticles(queryString)

  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await fetchCategories()

  return {
    props: {
      categories: {
        items: categories.data,
        paginations: categories.meta.pagination,
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination,
      },
      slug: query.category,
    },
  }
}

export default category
